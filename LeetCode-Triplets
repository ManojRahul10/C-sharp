You are given a 0-indexed integer array nums.

Return the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0.

The value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].

 

Example 1:

Input: nums = [12,6,1,2,7]
Output: 77
Explanation: The value of the triplet (0, 2, 4) is (nums[0] - nums[2]) * nums[4] = 77.
It can be shown that there are no ordered triplets of indices with a value greater than 77. 

--------------------------------------------------------------------------------------------------------------
public class Solution {
    public long MaximumTripletValue(int[] nums) {
        int n = nums.Length;
        if (n < 3) return 0; // Not enough elements for a triplet

        long maxValue = 0;
        int max_i = nums[0]; // Best nums[i] before j

        // Precompute max_suffix[k] (stores the maximum nums[k] after index j)
        int[] max_suffix = new int[n];
        max_suffix[n - 1] = nums[n - 1];

        for (int k = n - 2; k >= 0; k--) {
            max_suffix[k] = Math.Max(max_suffix[k + 1], nums[k]);
        }

        // Iterate through j, finding the best triplet value
        for (int j = 1; j < n - 1; j++) {
            long tripletValue = ((long)(max_i - nums[j])) * max_suffix[j + 1];
            maxValue = Math.Max(maxValue, tripletValue);
            max_i = Math.Max(max_i, nums[j]); // Update max_i for the next iteration
        }

        return maxValue;
    }
}
